type Query {
  users(query: String): [User!]!
  user(id: ID!): User!
  me: User!
  getBudget: BudgetPayload!
  getTransactions: [Transaction!]!
  author(username: String!): User
  currency: Currency
  currencies: [Currency!]!
  checkToken(token: String!): User!
  checkUsername(username: String!): User
  categories(first: Int): [Category!]!
  category(id: ID!): Category!
  topics(category: String, skip: Int, first: Int, orderBy: String): TopicsPayload!
  authorTopics(user: String!): [Topic!]!
  authorPosts(user: String!): [Post!]!
  topic(slug: String!, skip: Int, first: Int): Topic

  posts(topic: ID!, first: Int): [Post!]!
  post(id: ID!): Post!
  checkFavorite(id: ID!): BooleanPayload!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput): User!
  deleteUser(id: ID!): User!
  loginUser(data: LoginUserInput!): AuthPayload!
  changePassword(data: ChangePasswordInput): User!
  sendForgetPasswordCode(email: String!): ResultPayload!
  checkPasswordActivationCode(emailActivationCode: String!, email: String!, id: ID!): ResultPayload!
  resetPassword(emailActivationCode: String!, email: String!, id: ID!, password: String!): ResultPayload!
  sendEmailActivationCode: ResultPayload!
  sendPhoneActivationCode: ResultPayload!
  checkEmailActivationCode(emailActivationCode: String!, email: String!, id: ID!): ResultPayload!
  checkPhoneActivationCode(phoneActivationCode: String!): ResultPayload!
  createCategory(data: CreateCategoryInput!): Category!
  updateCategory(data: UpdateCategoryInput, id: ID!): Category!
  deleteCategory(id: ID!): Category!

  createTopic(data: CreateTopicInput!, category: ID!): Topic!
  updateTopic(data: UpdateTopicInput, id: ID!): Topic!
  deleteTopic(id: ID!): Topic!

  createPost(data: CreatePostInput!, topic: String!): Post!
  updatePost(data: UpdatePostInput, id: ID!): Post!
  deletePost(id: ID!): Post!
  favoritePost(id: ID!): ResultPayload!
  likePost(id: ID!, likeType: LikeType): Post!
}

type Subscription {
  transactionSubscription: TransactionSubscriptionPayload!
  livePostSubscription(slug: String!): LivePostSubscriptionPayload!
}

type TransactionSubscriptionPayload {
  mutation: MutationType
  node: Transaction!
}

type LivePostSubscriptionPayload {
  mutation: MutationType
  node: Post!
}

type TopicsPayload {
  topics: [Topic!]!
  totalTopic: Int!
}

type BudgetPayload {
  result: Int!
}

type ResultPayload {
  result: String!
}

type BooleanPayload {
  result: Boolean!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
  twoFactorCode: String
}

type User {
  id: ID!
  username: String!
  email: String!
  city: String
  phoneNumber: String
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivation: Boolean!
  emailActivation: Boolean!
  twoFactorActivation: Boolean!
  topicsCount: Int
  postsCount: Int
  theme: Theme!
  budget: Int!
  topics: [Topic!]!
  posts: [Post!]!
  transactions: [Transaction!]!
  likes: [Like!]!
  favorites: [Favorite!]!
  createdAt: String!
  updatedAt: String!
}

input CreateUserInput {
  username: String!
  email: String!
  city: String
  phoneNumber: String
  password: String!
}

input UpdateUserInput {
  email: String
  city: String
  phoneNumber: String
}

input ChangePasswordInput {
  currentPassword: String!
  password: String!
}

type Transaction {
  id: ID!
  amount: Int!
  description: String
  budgetType: BudgetType!
  user: User!
  topic: Topic
  post: Post
  createdAt: String!
  updatedAt: String!
}

type Category {
  id: ID!
  title: String!
  description: String
  topics: [Topic!]!
  topicsCount: Int
  slug: String!
  order: Int!
}

input CreateCategoryInput {
  title: String!
  description: String
}

input UpdateCategoryInput {
  title: String
  description: String
}

type Topic {
  id: ID!
  title: String!
  slug: String!
  category: Category!
  user: User
  posts(first: Int, skip: Int): [Post!]!
  transactions: [Transaction!]!
  paidTimes: Int!
  postsCount: Int
  status: Boolean!
  createdAt: String!
  updatedAt: String!
}

input CreateTopicInput {
  title: String!
  description: String!
}

input UpdateTopicInput {
  title: String!
}

type Post {
  id: ID!
  description: String!
  topic: Topic!
  user: User!
  likesCount: Int
  isEditable: Boolean
  userLiked: String
  favorites: [Favorite!]!
  likes: [Like!]!
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions: [Transaction!]!
  totalEarnings: Int!
  createdAt: String!
  updatedAt: String!
}

input CreatePostInput {
  description: String!
  status: PostStatusType
}

input UpdatePostInput {
  description: String
}

type Favorite {
  id: ID!
  post: Post!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type Like {
  id: ID!
  likeType: LikeType
  post: Post!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type Currency {
  id: ID!
  usDollar: Float!
  turkishLira: Float!
  createdAt: String!
  updatedAt: String!
}

enum LikeType {
  LIKE
  DISLIKE
}

enum BudgetType {
  FAVORITE
  LIKE
  TOPIC
  POST
  WELCOME
  REPORT
  CUSTOM
  DELETEDPOST
  DISLIKE
  PAYMENT
}

enum Theme {
  LIGHT
  DARK
}

enum PostStatusType {
  DRAFT
  ACTIVE
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

enum UserType {
  ADMIN
  MODERATOR
  SUBSCRIBER
  PAYABLEUSER
  USER
  PASSIVE
  BANNED
}

type AggregateCategory {
  count: Int!
}

type AggregateFavorite {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateTopic {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum BudgetType {
  FAVORITE
  LIKE
  TOPIC
  POST
  WELCOME
  REPORT
  DELETEDPOST
  DISLIKE
  PAYMENT
}

type Category {
  id: ID!
  title: String!
  description: String
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  slug: String!
  order: Int!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  title: String!
  description: String
  topics: TopicCreateManyWithoutCategoryInput
  slug: String!
  order: Int!
}

input CategoryCreateOneWithoutTopicsInput {
  create: CategoryCreateWithoutTopicsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutTopicsInput {
  id: ID
  title: String!
  description: String
  slug: String!
  order: Int!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  slug_ASC
  slug_DESC
  order_ASC
  order_DESC
}

type CategoryPreviousValues {
  id: ID!
  title: String!
  description: String
  slug: String!
  order: Int!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  title: String
  description: String
  topics: TopicUpdateManyWithoutCategoryInput
  slug: String
  order: Int
}

input CategoryUpdateManyMutationInput {
  title: String
  description: String
  slug: String
  order: Int
}

input CategoryUpdateOneRequiredWithoutTopicsInput {
  create: CategoryCreateWithoutTopicsInput
  update: CategoryUpdateWithoutTopicsDataInput
  upsert: CategoryUpsertWithoutTopicsInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutTopicsDataInput {
  title: String
  description: String
  slug: String
  order: Int
}

input CategoryUpsertWithoutTopicsInput {
  update: CategoryUpdateWithoutTopicsDataInput!
  create: CategoryCreateWithoutTopicsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

scalar DateTime

type Favorite {
  id: ID!
  post: Post!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FavoriteConnection {
  pageInfo: PageInfo!
  edges: [FavoriteEdge]!
  aggregate: AggregateFavorite!
}

input FavoriteCreateInput {
  id: ID
  post: PostCreateOneWithoutFavoritesInput!
  user: UserCreateOneWithoutFavoritesInput!
}

input FavoriteCreateManyWithoutPostInput {
  create: [FavoriteCreateWithoutPostInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input FavoriteCreateManyWithoutUserInput {
  create: [FavoriteCreateWithoutUserInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input FavoriteCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutFavoritesInput!
}

input FavoriteCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutFavoritesInput!
}

type FavoriteEdge {
  node: Favorite!
  cursor: String!
}

enum FavoriteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FavoritePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FavoriteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FavoriteScalarWhereInput!]
  OR: [FavoriteScalarWhereInput!]
  NOT: [FavoriteScalarWhereInput!]
}

type FavoriteSubscriptionPayload {
  mutation: MutationType!
  node: Favorite
  updatedFields: [String!]
  previousValues: FavoritePreviousValues
}

input FavoriteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FavoriteWhereInput
  AND: [FavoriteSubscriptionWhereInput!]
  OR: [FavoriteSubscriptionWhereInput!]
  NOT: [FavoriteSubscriptionWhereInput!]
}

input FavoriteUpdateInput {
  post: PostUpdateOneRequiredWithoutFavoritesInput
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateManyWithoutPostInput {
  create: [FavoriteCreateWithoutPostInput!]
  delete: [FavoriteWhereUniqueInput!]
  connect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [FavoriteScalarWhereInput!]
}

input FavoriteUpdateManyWithoutUserInput {
  create: [FavoriteCreateWithoutUserInput!]
  delete: [FavoriteWhereUniqueInput!]
  connect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FavoriteScalarWhereInput!]
}

input FavoriteUpdateWithoutPostDataInput {
  user: UserUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateWithoutUserDataInput {
  post: PostUpdateOneRequiredWithoutFavoritesInput
}

input FavoriteUpdateWithWhereUniqueWithoutPostInput {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateWithoutPostDataInput!
}

input FavoriteUpdateWithWhereUniqueWithoutUserInput {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateWithoutUserDataInput!
}

input FavoriteUpsertWithWhereUniqueWithoutPostInput {
  where: FavoriteWhereUniqueInput!
  update: FavoriteUpdateWithoutPostDataInput!
  create: FavoriteCreateWithoutPostInput!
}

input FavoriteUpsertWithWhereUniqueWithoutUserInput {
  where: FavoriteWhereUniqueInput!
  update: FavoriteUpdateWithoutUserDataInput!
  create: FavoriteCreateWithoutUserInput!
}

input FavoriteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  post: PostWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
}

input FavoriteWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  likeType: LikeType
  post: Post!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  likeType: LikeType
  post: PostCreateOneWithoutLikesInput!
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  likeType: LikeType
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateWithoutUserInput {
  id: ID
  likeType: LikeType
  post: PostCreateOneWithoutLikesInput!
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  likeType_ASC
  likeType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LikePreviousValues {
  id: ID!
  likeType: LikeType
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  likeType: LikeType
  likeType_not: LikeType
  likeType_in: [LikeType!]
  likeType_not_in: [LikeType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

enum LikeType {
  LIKE
  DISLIKE
}

input LikeUpdateInput {
  likeType: LikeType
  post: PostUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateManyDataInput {
  likeType: LikeType
}

input LikeUpdateManyMutationInput {
  likeType: LikeType
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
}

input LikeUpdateManyWithWhereNestedInput {
  where: LikeScalarWhereInput!
  data: LikeUpdateManyDataInput!
}

input LikeUpdateWithoutPostDataInput {
  likeType: LikeType
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  likeType: LikeType
  post: PostUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  likeType: LikeType
  likeType_not: LikeType
  likeType_in: [LikeType!]
  likeType_not_in: [LikeType!]
  post: PostWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createFavorite(data: FavoriteCreateInput!): Favorite!
  updateFavorite(data: FavoriteUpdateInput!, where: FavoriteWhereUniqueInput!): Favorite
  upsertFavorite(where: FavoriteWhereUniqueInput!, create: FavoriteCreateInput!, update: FavoriteUpdateInput!): Favorite!
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteManyFavorites(where: FavoriteWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  updateManyLikes(data: LikeUpdateManyMutationInput!, where: LikeWhereInput): BatchPayload!
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createTopic(data: TopicCreateInput!): Topic!
  updateTopic(data: TopicUpdateInput!, where: TopicWhereUniqueInput!): Topic
  updateManyTopics(data: TopicUpdateManyMutationInput!, where: TopicWhereInput): BatchPayload!
  upsertTopic(where: TopicWhereUniqueInput!, create: TopicCreateInput!, update: TopicUpdateInput!): Topic!
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteManyTopics(where: TopicWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  description: String!
  topic: Topic!
  user: User!
  favorites(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  description: String!
  topic: TopicCreateOneWithoutPostsInput!
  user: UserCreateOneWithoutPostsInput!
  favorites: FavoriteCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions: TransactionCreateManyWithoutPostInput
}

input PostCreateManyWithoutTopicInput {
  create: [PostCreateWithoutTopicInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutFavoritesInput {
  create: PostCreateWithoutFavoritesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutTransactionsInput {
  create: PostCreateWithoutTransactionsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutFavoritesInput {
  id: ID
  description: String!
  topic: TopicCreateOneWithoutPostsInput!
  user: UserCreateOneWithoutPostsInput!
  likes: LikeCreateManyWithoutPostInput
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions: TransactionCreateManyWithoutPostInput
}

input PostCreateWithoutLikesInput {
  id: ID
  description: String!
  topic: TopicCreateOneWithoutPostsInput!
  user: UserCreateOneWithoutPostsInput!
  favorites: FavoriteCreateManyWithoutPostInput
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions: TransactionCreateManyWithoutPostInput
}

input PostCreateWithoutTopicInput {
  id: ID
  description: String!
  user: UserCreateOneWithoutPostsInput!
  favorites: FavoriteCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions: TransactionCreateManyWithoutPostInput
}

input PostCreateWithoutTransactionsInput {
  id: ID
  description: String!
  topic: TopicCreateOneWithoutPostsInput!
  user: UserCreateOneWithoutPostsInput!
  favorites: FavoriteCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
}

input PostCreateWithoutUserInput {
  id: ID
  description: String!
  topic: TopicCreateOneWithoutPostsInput!
  favorites: FavoriteCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  transactions: TransactionCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  favoritesPaidTimes_ASC
  favoritesPaidTimes_DESC
  likesPaidTimes_ASC
  likesPaidTimes_DESC
  dislikesPaidTimes_ASC
  dislikesPaidTimes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  description: String!
  favoritesPaidTimes: Int!
  likesPaidTimes: Int!
  dislikesPaidTimes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  favoritesPaidTimes: Int
  favoritesPaidTimes_not: Int
  favoritesPaidTimes_in: [Int!]
  favoritesPaidTimes_not_in: [Int!]
  favoritesPaidTimes_lt: Int
  favoritesPaidTimes_lte: Int
  favoritesPaidTimes_gt: Int
  favoritesPaidTimes_gte: Int
  likesPaidTimes: Int
  likesPaidTimes_not: Int
  likesPaidTimes_in: [Int!]
  likesPaidTimes_not_in: [Int!]
  likesPaidTimes_lt: Int
  likesPaidTimes_lte: Int
  likesPaidTimes_gt: Int
  likesPaidTimes_gte: Int
  dislikesPaidTimes: Int
  dislikesPaidTimes_not: Int
  dislikesPaidTimes_in: [Int!]
  dislikesPaidTimes_not_in: [Int!]
  dislikesPaidTimes_lt: Int
  dislikesPaidTimes_lte: Int
  dislikesPaidTimes_gt: Int
  dislikesPaidTimes_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  description: String
  topic: TopicUpdateOneRequiredWithoutPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  favorites: FavoriteUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
  transactions: TransactionUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  description: String
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
}

input PostUpdateManyMutationInput {
  description: String
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
}

input PostUpdateManyWithoutTopicInput {
  create: [PostCreateWithoutTopicInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutFavoritesInput {
  create: PostCreateWithoutFavoritesInput
  update: PostUpdateWithoutFavoritesDataInput
  upsert: PostUpsertWithoutFavoritesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneRequiredWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutTransactionsInput {
  create: PostCreateWithoutTransactionsInput
  update: PostUpdateWithoutTransactionsDataInput
  upsert: PostUpsertWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutFavoritesDataInput {
  description: String
  topic: TopicUpdateOneRequiredWithoutPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
  transactions: TransactionUpdateManyWithoutPostInput
}

input PostUpdateWithoutLikesDataInput {
  description: String
  topic: TopicUpdateOneRequiredWithoutPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  favorites: FavoriteUpdateManyWithoutPostInput
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
  transactions: TransactionUpdateManyWithoutPostInput
}

input PostUpdateWithoutTopicDataInput {
  description: String
  user: UserUpdateOneRequiredWithoutPostsInput
  favorites: FavoriteUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
  transactions: TransactionUpdateManyWithoutPostInput
}

input PostUpdateWithoutTransactionsDataInput {
  description: String
  topic: TopicUpdateOneRequiredWithoutPostsInput
  user: UserUpdateOneRequiredWithoutPostsInput
  favorites: FavoriteUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
}

input PostUpdateWithoutUserDataInput {
  description: String
  topic: TopicUpdateOneRequiredWithoutPostsInput
  favorites: FavoriteUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  favoritesPaidTimes: Int
  likesPaidTimes: Int
  dislikesPaidTimes: Int
  transactions: TransactionUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutTopicInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTopicDataInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutFavoritesInput {
  update: PostUpdateWithoutFavoritesDataInput!
  create: PostCreateWithoutFavoritesInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithoutTransactionsInput {
  update: PostUpdateWithoutTransactionsDataInput!
  create: PostCreateWithoutTransactionsInput!
}

input PostUpsertWithWhereUniqueWithoutTopicInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTopicDataInput!
  create: PostCreateWithoutTopicInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  topic: TopicWhereInput
  user: UserWhereInput
  favorites_every: FavoriteWhereInput
  favorites_some: FavoriteWhereInput
  favorites_none: FavoriteWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  favoritesPaidTimes: Int
  favoritesPaidTimes_not: Int
  favoritesPaidTimes_in: [Int!]
  favoritesPaidTimes_not_in: [Int!]
  favoritesPaidTimes_lt: Int
  favoritesPaidTimes_lte: Int
  favoritesPaidTimes_gt: Int
  favoritesPaidTimes_gte: Int
  likesPaidTimes: Int
  likesPaidTimes_not: Int
  likesPaidTimes_in: [Int!]
  likesPaidTimes_not_in: [Int!]
  likesPaidTimes_lt: Int
  likesPaidTimes_lte: Int
  likesPaidTimes_gt: Int
  likesPaidTimes_gte: Int
  dislikesPaidTimes: Int
  dislikesPaidTimes_not: Int
  dislikesPaidTimes_in: [Int!]
  dislikesPaidTimes_not_in: [Int!]
  dislikesPaidTimes_lt: Int
  dislikesPaidTimes_lte: Int
  dislikesPaidTimes_gt: Int
  dislikesPaidTimes_gte: Int
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favorites(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite]!
  favoritesConnection(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic]!
  topicsConnection(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TopicConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  favorite(where: FavoriteSubscriptionWhereInput): FavoriteSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  topic(where: TopicSubscriptionWhereInput): TopicSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum Theme {
  LIGHT
  DARK
}

type Topic {
  id: ID!
  title: String!
  slug: String!
  category: Category!
  user: User
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  paidTimes: Int!
  status: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge]!
  aggregate: AggregateTopic!
}

input TopicCreateInput {
  id: ID
  title: String!
  slug: String!
  category: CategoryCreateOneWithoutTopicsInput!
  user: UserCreateOneWithoutTopicsInput
  posts: PostCreateManyWithoutTopicInput
  transactions: TransactionCreateManyWithoutTopicInput
  paidTimes: Int!
  status: Boolean!
}

input TopicCreateManyWithoutCategoryInput {
  create: [TopicCreateWithoutCategoryInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateManyWithoutUserInput {
  create: [TopicCreateWithoutUserInput!]
  connect: [TopicWhereUniqueInput!]
}

input TopicCreateOneWithoutPostsInput {
  create: TopicCreateWithoutPostsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateOneWithoutTransactionsInput {
  create: TopicCreateWithoutTransactionsInput
  connect: TopicWhereUniqueInput
}

input TopicCreateWithoutCategoryInput {
  id: ID
  title: String!
  slug: String!
  user: UserCreateOneWithoutTopicsInput
  posts: PostCreateManyWithoutTopicInput
  transactions: TransactionCreateManyWithoutTopicInput
  paidTimes: Int!
  status: Boolean!
}

input TopicCreateWithoutPostsInput {
  id: ID
  title: String!
  slug: String!
  category: CategoryCreateOneWithoutTopicsInput!
  user: UserCreateOneWithoutTopicsInput
  transactions: TransactionCreateManyWithoutTopicInput
  paidTimes: Int!
  status: Boolean!
}

input TopicCreateWithoutTransactionsInput {
  id: ID
  title: String!
  slug: String!
  category: CategoryCreateOneWithoutTopicsInput!
  user: UserCreateOneWithoutTopicsInput
  posts: PostCreateManyWithoutTopicInput
  paidTimes: Int!
  status: Boolean!
}

input TopicCreateWithoutUserInput {
  id: ID
  title: String!
  slug: String!
  category: CategoryCreateOneWithoutTopicsInput!
  posts: PostCreateManyWithoutTopicInput
  transactions: TransactionCreateManyWithoutTopicInput
  paidTimes: Int!
  status: Boolean!
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

enum TopicOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  paidTimes_ASC
  paidTimes_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TopicPreviousValues {
  id: ID!
  title: String!
  slug: String!
  paidTimes: Int!
  status: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TopicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  paidTimes: Int
  paidTimes_not: Int
  paidTimes_in: [Int!]
  paidTimes_not_in: [Int!]
  paidTimes_lt: Int
  paidTimes_lte: Int
  paidTimes_gt: Int
  paidTimes_gte: Int
  status: Boolean
  status_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TopicScalarWhereInput!]
  OR: [TopicScalarWhereInput!]
  NOT: [TopicScalarWhereInput!]
}

type TopicSubscriptionPayload {
  mutation: MutationType!
  node: Topic
  updatedFields: [String!]
  previousValues: TopicPreviousValues
}

input TopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TopicWhereInput
  AND: [TopicSubscriptionWhereInput!]
  OR: [TopicSubscriptionWhereInput!]
  NOT: [TopicSubscriptionWhereInput!]
}

input TopicUpdateInput {
  title: String
  slug: String
  category: CategoryUpdateOneRequiredWithoutTopicsInput
  user: UserUpdateOneWithoutTopicsInput
  posts: PostUpdateManyWithoutTopicInput
  transactions: TransactionUpdateManyWithoutTopicInput
  paidTimes: Int
  status: Boolean
}

input TopicUpdateManyDataInput {
  title: String
  slug: String
  paidTimes: Int
  status: Boolean
}

input TopicUpdateManyMutationInput {
  title: String
  slug: String
  paidTimes: Int
  status: Boolean
}

input TopicUpdateManyWithoutCategoryInput {
  create: [TopicCreateWithoutCategoryInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithoutUserInput {
  create: [TopicCreateWithoutUserInput!]
  delete: [TopicWhereUniqueInput!]
  connect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  disconnect: [TopicWhereUniqueInput!]
  update: [TopicUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TopicUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TopicScalarWhereInput!]
  updateMany: [TopicUpdateManyWithWhereNestedInput!]
}

input TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput!
  data: TopicUpdateManyDataInput!
}

input TopicUpdateOneRequiredWithoutPostsInput {
  create: TopicCreateWithoutPostsInput
  update: TopicUpdateWithoutPostsDataInput
  upsert: TopicUpsertWithoutPostsInput
  connect: TopicWhereUniqueInput
}

input TopicUpdateOneWithoutTransactionsInput {
  create: TopicCreateWithoutTransactionsInput
  update: TopicUpdateWithoutTransactionsDataInput
  upsert: TopicUpsertWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  connect: TopicWhereUniqueInput
}

input TopicUpdateWithoutCategoryDataInput {
  title: String
  slug: String
  user: UserUpdateOneWithoutTopicsInput
  posts: PostUpdateManyWithoutTopicInput
  transactions: TransactionUpdateManyWithoutTopicInput
  paidTimes: Int
  status: Boolean
}

input TopicUpdateWithoutPostsDataInput {
  title: String
  slug: String
  category: CategoryUpdateOneRequiredWithoutTopicsInput
  user: UserUpdateOneWithoutTopicsInput
  transactions: TransactionUpdateManyWithoutTopicInput
  paidTimes: Int
  status: Boolean
}

input TopicUpdateWithoutTransactionsDataInput {
  title: String
  slug: String
  category: CategoryUpdateOneRequiredWithoutTopicsInput
  user: UserUpdateOneWithoutTopicsInput
  posts: PostUpdateManyWithoutTopicInput
  paidTimes: Int
  status: Boolean
}

input TopicUpdateWithoutUserDataInput {
  title: String
  slug: String
  category: CategoryUpdateOneRequiredWithoutTopicsInput
  posts: PostUpdateManyWithoutTopicInput
  transactions: TransactionUpdateManyWithoutTopicInput
  paidTimes: Int
  status: Boolean
}

input TopicUpdateWithWhereUniqueWithoutCategoryInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutCategoryDataInput!
}

input TopicUpdateWithWhereUniqueWithoutUserInput {
  where: TopicWhereUniqueInput!
  data: TopicUpdateWithoutUserDataInput!
}

input TopicUpsertWithoutPostsInput {
  update: TopicUpdateWithoutPostsDataInput!
  create: TopicCreateWithoutPostsInput!
}

input TopicUpsertWithoutTransactionsInput {
  update: TopicUpdateWithoutTransactionsDataInput!
  create: TopicCreateWithoutTransactionsInput!
}

input TopicUpsertWithWhereUniqueWithoutCategoryInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutCategoryDataInput!
  create: TopicCreateWithoutCategoryInput!
}

input TopicUpsertWithWhereUniqueWithoutUserInput {
  where: TopicWhereUniqueInput!
  update: TopicUpdateWithoutUserDataInput!
  create: TopicCreateWithoutUserInput!
}

input TopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  category: CategoryWhereInput
  user: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  paidTimes: Int
  paidTimes_not: Int
  paidTimes_in: [Int!]
  paidTimes_not_in: [Int!]
  paidTimes_lt: Int
  paidTimes_lte: Int
  paidTimes_gt: Int
  paidTimes_gte: Int
  status: Boolean
  status_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
}

input TopicWhereUniqueInput {
  id: ID
  slug: String
}

type Transaction {
  id: ID!
  amount: Int!
  budgetType: BudgetType!
  user: User!
  topic: Topic
  post: Post
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  amount: Int!
  budgetType: BudgetType!
  user: UserCreateOneWithoutTransactionsInput!
  topic: TopicCreateOneWithoutTransactionsInput
  post: PostCreateOneWithoutTransactionsInput
}

input TransactionCreateManyWithoutPostInput {
  create: [TransactionCreateWithoutPostInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateManyWithoutTopicInput {
  create: [TransactionCreateWithoutTopicInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateManyWithoutUserInput {
  create: [TransactionCreateWithoutUserInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutPostInput {
  id: ID
  amount: Int!
  budgetType: BudgetType!
  user: UserCreateOneWithoutTransactionsInput!
  topic: TopicCreateOneWithoutTransactionsInput
}

input TransactionCreateWithoutTopicInput {
  id: ID
  amount: Int!
  budgetType: BudgetType!
  user: UserCreateOneWithoutTransactionsInput!
  post: PostCreateOneWithoutTransactionsInput
}

input TransactionCreateWithoutUserInput {
  id: ID
  amount: Int!
  budgetType: BudgetType!
  topic: TopicCreateOneWithoutTransactionsInput
  post: PostCreateOneWithoutTransactionsInput
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  budgetType_ASC
  budgetType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  amount: Int!
  budgetType: BudgetType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  budgetType: BudgetType
  budgetType_not: BudgetType
  budgetType_in: [BudgetType!]
  budgetType_not_in: [BudgetType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  amount: Int
  budgetType: BudgetType
  user: UserUpdateOneRequiredWithoutTransactionsInput
  topic: TopicUpdateOneWithoutTransactionsInput
  post: PostUpdateOneWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  amount: Int
  budgetType: BudgetType
}

input TransactionUpdateManyMutationInput {
  amount: Int
  budgetType: BudgetType
}

input TransactionUpdateManyWithoutPostInput {
  create: [TransactionCreateWithoutPostInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithoutTopicInput {
  create: [TransactionCreateWithoutTopicInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutTopicInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutTopicInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithoutUserInput {
  create: [TransactionCreateWithoutUserInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutPostDataInput {
  amount: Int
  budgetType: BudgetType
  user: UserUpdateOneRequiredWithoutTransactionsInput
  topic: TopicUpdateOneWithoutTransactionsInput
}

input TransactionUpdateWithoutTopicDataInput {
  amount: Int
  budgetType: BudgetType
  user: UserUpdateOneRequiredWithoutTransactionsInput
  post: PostUpdateOneWithoutTransactionsInput
}

input TransactionUpdateWithoutUserDataInput {
  amount: Int
  budgetType: BudgetType
  topic: TopicUpdateOneWithoutTransactionsInput
  post: PostUpdateOneWithoutTransactionsInput
}

input TransactionUpdateWithWhereUniqueWithoutPostInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutPostDataInput!
}

input TransactionUpdateWithWhereUniqueWithoutTopicInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutTopicDataInput!
}

input TransactionUpdateWithWhereUniqueWithoutUserInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutUserDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutPostInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutPostDataInput!
  create: TransactionCreateWithoutPostInput!
}

input TransactionUpsertWithWhereUniqueWithoutTopicInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutTopicDataInput!
  create: TransactionCreateWithoutTopicInput!
}

input TransactionUpsertWithWhereUniqueWithoutUserInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutUserDataInput!
  create: TransactionCreateWithoutUserInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  budgetType: BudgetType
  budgetType_not: BudgetType
  budgetType_in: [BudgetType!]
  budgetType_not_in: [BudgetType!]
  user: UserWhereInput
  topic: TopicWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  topics(where: TopicWhereInput, orderBy: TopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Topic!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  favorites(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  topics: TopicCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  transactions: TransactionCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  favorites: FavoriteCreateManyWithoutUserInput
}

input UserCreateOneWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFavoritesInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  topics: TopicCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  transactions: TransactionCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
}

input UserCreateWithoutLikesInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  topics: TopicCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  transactions: TransactionCreateManyWithoutUserInput
  favorites: FavoriteCreateManyWithoutUserInput
}

input UserCreateWithoutPostsInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  topics: TopicCreateManyWithoutUserInput
  transactions: TransactionCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  favorites: FavoriteCreateManyWithoutUserInput
}

input UserCreateWithoutTopicsInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  posts: PostCreateManyWithoutUserInput
  transactions: TransactionCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  favorites: FavoriteCreateManyWithoutUserInput
}

input UserCreateWithoutTransactionsInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  topics: TopicCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  favorites: FavoriteCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  city_ASC
  city_DESC
  password_ASC
  password_DESC
  userType_ASC
  userType_DESC
  agreement_ASC
  agreement_DESC
  agreementVersion_ASC
  agreementVersion_DESC
  phoneNumberActivationCode_ASC
  phoneNumberActivationCode_DESC
  phoneNumberActivation_ASC
  phoneNumberActivation_DESC
  emailActivationCode_ASC
  emailActivationCode_DESC
  emailActivation_ASC
  emailActivation_DESC
  twoFactorCode_ASC
  twoFactorCode_DESC
  twoFactorActivation_ASC
  twoFactorActivation_DESC
  theme_ASC
  theme_DESC
  budget_ASC
  budget_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String
  city: String
  password: String!
  userType: UserType!
  agreement: String!
  agreementVersion: Float!
  phoneNumberActivationCode: String!
  phoneNumberActivation: Boolean!
  emailActivationCode: String!
  emailActivation: Boolean!
  twoFactorCode: String!
  twoFactorActivation: Boolean!
  theme: Theme!
  budget: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

enum UserType {
  ADMIN
  MODERATOR
  SUBSCRIBER
  PAYABLEUSER
  USER
  PASSIVE
  BANNED
}

input UserUpdateInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
  topics: TopicUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  favorites: FavoriteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
}

input UserUpdateOneRequiredWithoutFavoritesInput {
  create: UserCreateWithoutFavoritesInput
  update: UserUpdateWithoutFavoritesDataInput
  upsert: UserUpsertWithoutFavoritesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTransactionsInput {
  create: UserCreateWithoutTransactionsInput
  update: UserUpdateWithoutTransactionsDataInput
  upsert: UserUpsertWithoutTransactionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTopicsInput {
  create: UserCreateWithoutTopicsInput
  update: UserUpdateWithoutTopicsDataInput
  upsert: UserUpsertWithoutTopicsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFavoritesDataInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
  topics: TopicUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
}

input UserUpdateWithoutLikesDataInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
  topics: TopicUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
  favorites: FavoriteUpdateManyWithoutUserInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
  topics: TopicUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  favorites: FavoriteUpdateManyWithoutUserInput
}

input UserUpdateWithoutTopicsDataInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
  posts: PostUpdateManyWithoutUserInput
  transactions: TransactionUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  favorites: FavoriteUpdateManyWithoutUserInput
}

input UserUpdateWithoutTransactionsDataInput {
  username: String
  email: String
  phoneNumber: String
  city: String
  password: String
  userType: UserType
  agreement: String
  agreementVersion: Float
  phoneNumberActivationCode: String
  phoneNumberActivation: Boolean
  emailActivationCode: String
  emailActivation: Boolean
  twoFactorCode: String
  twoFactorActivation: Boolean
  theme: Theme
  budget: Int
  topics: TopicUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  favorites: FavoriteUpdateManyWithoutUserInput
}

input UserUpsertWithoutFavoritesInput {
  update: UserUpdateWithoutFavoritesDataInput!
  create: UserCreateWithoutFavoritesInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutTopicsInput {
  update: UserUpdateWithoutTopicsDataInput!
  create: UserCreateWithoutTopicsInput!
}

input UserUpsertWithoutTransactionsInput {
  update: UserUpdateWithoutTransactionsDataInput!
  create: UserCreateWithoutTransactionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  userType: UserType
  userType_not: UserType
  userType_in: [UserType!]
  userType_not_in: [UserType!]
  agreement: String
  agreement_not: String
  agreement_in: [String!]
  agreement_not_in: [String!]
  agreement_lt: String
  agreement_lte: String
  agreement_gt: String
  agreement_gte: String
  agreement_contains: String
  agreement_not_contains: String
  agreement_starts_with: String
  agreement_not_starts_with: String
  agreement_ends_with: String
  agreement_not_ends_with: String
  agreementVersion: Float
  agreementVersion_not: Float
  agreementVersion_in: [Float!]
  agreementVersion_not_in: [Float!]
  agreementVersion_lt: Float
  agreementVersion_lte: Float
  agreementVersion_gt: Float
  agreementVersion_gte: Float
  phoneNumberActivationCode: String
  phoneNumberActivationCode_not: String
  phoneNumberActivationCode_in: [String!]
  phoneNumberActivationCode_not_in: [String!]
  phoneNumberActivationCode_lt: String
  phoneNumberActivationCode_lte: String
  phoneNumberActivationCode_gt: String
  phoneNumberActivationCode_gte: String
  phoneNumberActivationCode_contains: String
  phoneNumberActivationCode_not_contains: String
  phoneNumberActivationCode_starts_with: String
  phoneNumberActivationCode_not_starts_with: String
  phoneNumberActivationCode_ends_with: String
  phoneNumberActivationCode_not_ends_with: String
  phoneNumberActivation: Boolean
  phoneNumberActivation_not: Boolean
  emailActivationCode: String
  emailActivationCode_not: String
  emailActivationCode_in: [String!]
  emailActivationCode_not_in: [String!]
  emailActivationCode_lt: String
  emailActivationCode_lte: String
  emailActivationCode_gt: String
  emailActivationCode_gte: String
  emailActivationCode_contains: String
  emailActivationCode_not_contains: String
  emailActivationCode_starts_with: String
  emailActivationCode_not_starts_with: String
  emailActivationCode_ends_with: String
  emailActivationCode_not_ends_with: String
  emailActivation: Boolean
  emailActivation_not: Boolean
  twoFactorCode: String
  twoFactorCode_not: String
  twoFactorCode_in: [String!]
  twoFactorCode_not_in: [String!]
  twoFactorCode_lt: String
  twoFactorCode_lte: String
  twoFactorCode_gt: String
  twoFactorCode_gte: String
  twoFactorCode_contains: String
  twoFactorCode_not_contains: String
  twoFactorCode_starts_with: String
  twoFactorCode_not_starts_with: String
  twoFactorCode_ends_with: String
  twoFactorCode_not_ends_with: String
  twoFactorActivation: Boolean
  twoFactorActivation_not: Boolean
  theme: Theme
  theme_not: Theme
  theme_in: [Theme!]
  theme_not_in: [Theme!]
  budget: Int
  budget_not: Int
  budget_in: [Int!]
  budget_not_in: [Int!]
  budget_lt: Int
  budget_lte: Int
  budget_gt: Int
  budget_gte: Int
  topics_every: TopicWhereInput
  topics_some: TopicWhereInput
  topics_none: TopicWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  favorites_every: FavoriteWhereInput
  favorites_some: FavoriteWhereInput
  favorites_none: FavoriteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  phoneNumber: String
}
